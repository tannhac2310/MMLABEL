version: "3.4"

services:
  nats_streaming:
    ports:
      - 4222:4222
    image: nats-streaming:latest
    command: -m 8222 --cluster_id local-cluster
  redis:
    ports:
      - 6379:6379
    image: redis:5.0
    command: sh -c 'exec redis-server --requirepass "${REDIS_PASSWORD}"'
  db:
    image: cockroachdb/cockroach:v23.1.11
    command: start-single-node --insecure
    restart: always
    volumes:
      - mm-printing-backenddata:/var/lib/cockroach
    ports:
      - 26257:26257
      - 8088:8080
  s3_storage:
    image: minio/minio:RELEASE.2019-08-01T22-18-54Z
    ports:
      - 9000:9000
    environment:
      MINIO_ACCESS_KEY: access_key
      MINIO_SECRET_KEY: secret_key
      MINIO_REGION: us-east-1
    command: ["server", "/data"]
  migrate:
    depends_on:
      - db
    image: migrate/migrate
    volumes:
      - "../migrations/:/migrations/"
    entrypoint: sh -c "./migrate -path=/migrations/ -database crdb-postgres://root@db:26257/postgres?sslmode=disable up"
  mc_client:
    image: minio/mc:RELEASE.2019-07-31T19-17-35Z
    depends_on:
      - s3_storage
    environment:
      MINIO_ACCESS_KEY: access_key
      MINIO_SECRET_KEY: secret_key
      INIT_BUCKET_NAME: mm-printing
    volumes:
      - "./scripts/:/scripts/"
    entrypoint: /scripts/init_s3_bucket.sh
  jaeger:
    image: jaegertracing/all-in-one:1.21
    restart: always
    ports:
      - 5775:5775/udp
      - 6831:6831/udp
      - 6832:6832/udp
      - 5778:5778
      - 16686:16686
      - 14268:14268
      - 14250:14250
      - 9411:9411
    command: ["--log-level", "debug"]
  pyroscope:
    image: "pyroscope/pyroscope:latest"
    ports:
      - "4040:4040"
    command:
      - "server"
  swagger-ui:
    image: swaggerapi/swagger-ui:v3.41.1
    ports:
      - "8082:8080"
  hydra:
    build:
      context: ../
      dockerfile: ${DOCKER_FILE}
      target: dev_env
    image: mm-printing_dev_image
    volumes:
      - "../:/mm-printing/"
    working_dir: /mm-printing
    entrypoint: modd --file=modd_hydra.conf
    ports:
      - "4100:4100"
  iot:
    build:
      context: ../
      dockerfile: ${DOCKER_FILE}
      target: dev_env
    image: mm-printing_dev_image
    volumes:
      - "../:/mm-printing/"
    working_dir: /mm-printing
    entrypoint: modd --file=modd_iot.conf
    ports:
      - "5100:5100"
  aurora:
    build:
      context: ../
      dockerfile: ${DOCKER_FILE}
      target: dev_env
    image: mm-printing_dev_image
    volumes:
      - "../:/mm-printing/"
    working_dir: /mm-printing
    entrypoint: modd --file=modd_aurora.conf
    ports:
      - "6100:6100"
      - 2345:2345
  mock_gen:
    image: vektra/mockery
    volumes:
      - "../:/mm-printing/"
    working_dir: /mm-printing
  # hydra_test:
  #   build:
  #     context: ../
  #     dockerfile: ${DOCKER_FILE}
  #     target: dev_env
  #   ports:
  #     - 4100:4100
  #   volumes:
  #     - "../resources:/resources"
  #   command: [ "/server", "hydra", "--configPath", "./resources/configs/local/hydra.config.yaml" ]
  #   networks:
  #     default:
  #       aliases:
  #         - hydra
  # gezu_test:
  #   build:
  #     context: ../
  #     dockerfile: ${DOCKER_FILE}
  #     target: dev_env
  #   ports:
  #     - 5100:5100
  #   volumes:
  #     - "../resources:/resources"
  #   command: [ "/server", "gezu", "--configPath", "./resources/configs/local/gezu.config.yaml" ]
  #   networks:
  #     default:
  #       aliases:
  #         - gezu
  gateway:
    depends_on:
      - iot
      - hydra
      - aurora
    restart: always
    image: nginx:1.13.10
    ports:
      - 8084:80
    volumes:
      - "../deployments/nginx.conf:/etc/nginx/conf.d/default.conf"
volumes:
  mm-printing-backenddata:
